{"ast":null,"code":"import \"antd/lib/tag/style\";\nimport _Tag from \"antd/lib/tag\";\nvar _jsxFileName = \"/home/ben/code/million/getch-frontend-2.0/utils/table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nexport const tableColumns = [{\n  title: \"Interest\",\n  width: 70,\n  dataIndex: \"name\",\n  key: \"name\",\n  sorter: (a, b) => a.name.length - b.name.length\n}, {\n  title: \"Audience\",\n  width: 80,\n  dataIndex: \"audience_size\",\n  key: \"audience\",\n  render: item => {\n    const formatter = new Intl.NumberFormat(\"en-US\");\n    return __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 14\n      }\n    }, formatter.format(item));\n  }\n}, {\n  title: \"Topic\",\n  dataIndex: \"topic\",\n  width: 100,\n  key: \"topic\"\n}, {\n  title: \"Path\",\n  dataIndex: \"path\",\n  key: \"path\",\n  width: 60,\n  render: tags => __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, tags ? tags.map((tag, index) => {\n    return __jsx(\"div\", {\n      style: {\n        display: \"inline\"\n      },\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, __jsx(_Tag, {\n      color: \"magenta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 19\n      }\n    }, tag.toUpperCase()));\n  }) : \"\")\n}, {\n  title: \"Relevance Score\",\n  dataIndex: \"relevance\",\n  width: 100,\n  key: \"relevance\",\n  sorter: (a, b) => {\n    console.log(a, b);\n    return Number(a || 0) - Number(b || 0);\n  }\n}, {\n  title: \"Links\",\n  dataIndex: \"links\",\n  width: 100,\n  key: \"links\",\n  render: tags => __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, tags ? tags.map((tag, index) => {\n    return __jsx(\"a\", {\n      className: \"links\",\n      key: index,\n      href: tag,\n      target: \"_blank\",\n      style: {\n        display: \"inline\",\n        cursor: \"pointer\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, tag.includes(\"facebook\") ? __jsx(\"img\", {\n      src: \"/images/fbIcon.svg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }) : __jsx(\"img\", {\n      src: \"/images/google.svg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }));\n  }) : \"\")\n}];\nexport const performanceColumns = [{\n  title: \"Interest\",\n  width: 70,\n  dataIndex: \"name\",\n  key: \"name\",\n  sorter: (a, b) => a.name.length - b.name.length\n}, {\n  title: \"CPC\",\n  width: 70,\n  dataIndex: \"cpc\",\n  key: \"cpc\",\n  sorter: (a, b) => a - b\n}, {\n  title: \"Clicks\",\n  width: 70,\n  dataIndex: \"clicks\",\n  key: \"clicks\",\n  sorter: (a, b) => a - b\n}, {\n  title: \"Spend\",\n  width: 70,\n  dataIndex: \"spend\",\n  key: \"spend\",\n  sorter: (a, b) => a - b\n}, {\n  title: \"Conversions\",\n  width: 70,\n  dataIndex: \"convertions\",\n  key: \"convertions\",\n  sorter: (a, b) => a - b\n}];\nexport const chartData = [{\n  name: \"Nike\",\n  type: \"Spend\",\n  value: 38\n}, {\n  name: \"Adidas\",\n  type: \"Spend\",\n  value: 52\n}, {\n  name: \"Shoe\",\n  type: \"Spend\",\n  value: 61\n}, {\n  name: \"Sandals\",\n  type: \"Spend\",\n  value: 145\n}, {\n  name: \"Slippers\",\n  type: \"Spend\",\n  value: 48\n}, {\n  name: \"Shorts\",\n  type: \"Spend\",\n  value: 38\n}];","map":{"version":3,"sources":["/home/ben/code/million/getch-frontend-2.0/utils/table.js"],"names":["tableColumns","title","width","dataIndex","key","sorter","a","b","name","length","render","item","formatter","Intl","NumberFormat","format","tags","map","tag","index","display","toUpperCase","console","log","Number","cursor","includes","performanceColumns","chartData","type","value"],"mappings":"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","sourcesContent":["import { Tag } from \"antd\";\nexport const tableColumns = [\n  {\n    title: \"Interest\",\n    width: 70,\n    dataIndex: \"name\",\n    key: \"name\",\n    sorter: (a, b) => a.name.length - b.name.length,\n  },\n  {\n    title: \"Audience\",\n    width: 80,\n    dataIndex: \"audience_size\",\n    key: \"audience\",\n    render: (item) => {\n      const formatter = new Intl.NumberFormat(\"en-US\");\n      return <p>{formatter.format(item)}</p>;\n    },\n  },\n  {\n    title: \"Topic\",\n    dataIndex: \"topic\",\n    width: 100,\n    key: \"topic\",\n  },\n  {\n    title: \"Path\",\n    dataIndex: \"path\",\n    key: \"path\",\n    width: 60,\n    render: (tags) => (\n      <span>\n        {tags\n          ? tags.map((tag, index) => {\n              return (\n                <div style={{ display: \"inline\" }} key={index}>\n                  <Tag color=\"magenta\">{tag.toUpperCase()}</Tag>\n                </div>\n              );\n            })\n          : \"\"}\n      </span>\n    ),\n  },\n  {\n    title: \"Relevance Score\",\n    dataIndex: \"relevance\",\n    width: 100,\n    key: \"relevance\",\n    sorter: (a, b) => {\n      console.log(a, b)\n      return Number(a || 0) - Number(b || 0)\n    }\n  },\n  {\n    title: \"Links\",\n    dataIndex: \"links\",\n    width: 100,\n    key: \"links\",\n    render: (tags) => (\n      <span>\n        {tags\n          ? tags.map((tag, index) => {\n              return (\n                <a\n                  className=\"links\"\n                  key={index}\n                  href={tag}\n                  target=\"_blank\"\n                  style={{ display: \"inline\", cursor: \"pointer\" }}\n                >\n                  {tag.includes(\"facebook\") ? (\n                    <img src=\"/images/fbIcon.svg\" />\n                  ) : (\n                    <img src=\"/images/google.svg\" />\n                  )}\n\n                  {/* <Tag color=\"gold\">{tag}</Tag> */}\n                </a>\n              );\n            })\n          : \"\"}\n      </span>\n    ),\n  },\n];\n\nexport const performanceColumns = [\n  {\n    title: \"Interest\",\n    width: 70,\n    dataIndex: \"name\",\n    key: \"name\",\n    sorter: (a, b) => a.name.length - b.name.length,\n  },\n  {\n    title: \"CPC\",\n    width: 70,\n    dataIndex: \"cpc\",\n    key: \"cpc\",\n    sorter: (a, b) => a - b,\n  },\n  {\n    title: \"Clicks\",\n    width: 70,\n    dataIndex: \"clicks\",\n    key: \"clicks\",\n    sorter: (a, b) => a - b,\n  },\n  {\n    title: \"Spend\",\n    width: 70,\n    dataIndex: \"spend\",\n    key: \"spend\",\n    sorter: (a, b) => a - b,\n  },\n  {\n    title: \"Conversions\",\n    width: 70,\n    dataIndex: \"convertions\",\n    key: \"convertions\",\n    sorter: (a, b) => a - b,\n  },\n];\n\nexport const chartData = [\n  {\n    name: \"Nike\",\n    type: \"Spend\",\n    value: 38,\n  },\n  {\n    name: \"Adidas\",\n    type: \"Spend\",\n    value: 52,\n  },\n  {\n    name: \"Shoe\",\n    type: \"Spend\",\n    value: 61,\n  },\n  {\n    name: \"Sandals\",\n    type: \"Spend\",\n    value: 145,\n  },\n  {\n    name: \"Slippers\",\n    type: \"Spend\",\n    value: 48,\n  },\n  {\n    name: \"Shorts\",\n    type: \"Spend\",\n    value: 38,\n  },\n];\n"]},"metadata":{},"sourceType":"module"}