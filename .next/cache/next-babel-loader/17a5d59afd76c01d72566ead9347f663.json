{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleWare from \"redux-saga\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\nvar sagaMiddleware = createSagaMiddleWare();\nvar middlewares = [sagaMiddleware]; // if (process.env.NODE_ENV === \"development\") {\n//   middlewares.push(logger);\n// }\n\nmiddlewares.push(logger);\nvar store = createStore(rootReducer, applyMiddleware.apply(void 0, middlewares));\nsagaMiddleware.run(rootSaga);\npersistStore(store);\n\nvar makeStore = function makeStore(initialState) {\n  return store;\n};\n\nexport default makeStore;","map":{"version":3,"sources":["/mnt/c/Users/Ben Kissi/Documents/code/getch/getch-frontend-2.0/redux/store.js"],"names":["createStore","applyMiddleware","logger","createSagaMiddleWare","persistStore","rootReducer","rootSaga","sagaMiddleware","middlewares","push","store","run","makeStore","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,IAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AAEA,IAAMK,WAAW,GAAG,CAACD,cAAD,CAApB,C,CAEE;AACA;AACA;;AAEAC,WAAW,CAACC,IAAZ,CAAiBP,MAAjB;AAEA,IAAMQ,KAAK,GAAGV,WAAW,CAACK,WAAD,EAAcJ,eAAe,MAAf,SAAmBO,WAAnB,CAAd,CAAzB;AACAD,cAAc,CAACI,GAAf,CAAmBL,QAAnB;AAEAF,YAAY,CAACM,KAAD,CAAZ;;AAEF,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,YAAD,EAAkB;AAClC,SAAOH,KAAP;AACD,CAFD;;AAIA,eAAeE,SAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleWare from \"redux-saga\";\n\nimport { persistStore } from \"redux-persist\";\n\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleWare();\n\nconst middlewares = [sagaMiddleware];\n\n  // if (process.env.NODE_ENV === \"development\") {\n  //   middlewares.push(logger);\n  // }\n\n  middlewares.push(logger);\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  sagaMiddleware.run(rootSaga);\n\n  persistStore(store);\n\nconst makeStore = (initialState) => {\n  return store\n}\n\nexport default makeStore\n\n"]},"metadata":{},"sourceType":"module"}