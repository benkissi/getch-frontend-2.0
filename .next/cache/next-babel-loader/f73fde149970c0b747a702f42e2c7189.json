{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/slider/style\";\nimport _Slider from \"antd/lib/slider\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ExportToCsv } from \"export-to-csv\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport Loader from \"react-loader-spinner\";\nimport DashboardLayout from \"../components/dashboardLayout\";\nimport InterestTable from \"../components/table\";\nimport { tableColumns } from \"../utils/table\";\nimport decodeToken from \"../utils/auth\";\nimport { addingCurrentUser } from \"../redux/user/user-actions\";\nimport { searchStart } from \"../redux/search/search-actions\";\nimport \"react-toastify/scss/main.scss\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\n\nconst Index = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    selectedInterest: [],\n    min: null,\n    max: null\n  });\n  const {\n    token,\n    user,\n    addUser,\n    fbToken,\n    interestData,\n    searchInterest,\n    keyword,\n    interestCount,\n    searching\n  } = props;\n  const {\n    Search\n  } = _Input;\n  const router = useRouter();\n  useEffect(() => {\n    if (token) {\n      const decoded = decodeToken(token);\n      const {\n        _id,\n        name,\n        email,\n        domain\n      } = decoded;\n      const userData = {\n        id: _id,\n        name,\n        email,\n        domain,\n        xToken: token\n      };\n      addUser(userData);\n    } else if (user) {\n      console.log(user);\n    } else {\n      router.push(\"/signup\");\n    }\n  }, []);\n  useEffect(() => {\n    if (interestData && interestCount) {\n      const max = Math.max.apply(Math, interestData.map(item => item[\"audience_size\"]));\n      const min = Math.min.apply(Math, interestData.map(item => item[\"audience_size\"]));\n      setState(_objectSpread({}, state, {\n        max: max,\n        min: min,\n        interests: interestData,\n        interestNumber: interestCount\n      }));\n    }\n  }, [interestData, interestCount]);\n\n  const getInterest = async value => {\n    await searchInterest(fbToken.token, value, 500);\n  };\n\n  const onSelectionChange = (selectedRowKeys, selectedRows) => {\n    console.log(\"rows\", selectedRows);\n    const selectedInterest = selectedRows.map(interest => {\n      return interest.name;\n    });\n    setState(_objectSpread({}, state, {\n      selectedRowKeys,\n      selectedInterest,\n      selectedRows\n    }));\n  };\n\n  const onCopy = () => {\n    const {\n      selectedInterest\n    } = state;\n    console.log(\"copy\", selectedInterest);\n\n    if (selectedInterest.length) {\n      navigator.clipboard.writeText(selectedInterest).then(() => {\n        console.log(\"you copied\", selectedInterest.length);\n        toast.success(`You copied ${selectedInterest.length} items`, {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true\n        });\n      });\n    } else {\n      toast.error(`You have not made any selection`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    }\n  };\n\n  const options = {\n    fieldSeparator: \",\",\n    quoteStrings: '\"',\n    decimalSeparator: \".\",\n    showLabels: true,\n    showTitle: true,\n    title: \"Interest List\",\n    useTextFile: false,\n    useBom: true,\n    useKeysAsHeaders: true\n  };\n  const csvExporter = new ExportToCsv(options);\n\n  const handleExport = async () => {\n    // const {selectedRows} = state\n    if (interestData) {\n      let exportArray = [];\n      interestData.forEach(item => {\n        let readyExport = {};\n        readyExport.id = item.id;\n        readyExport.name = item.name;\n        readyExport.audience = item.audience_size;\n        readyExport.description = item.description;\n        readyExport.topic = item.topic;\n        readyExport.path = JSON.stringify(item.path);\n        readyExport.score = item.relevance;\n        exportArray.push(readyExport);\n      });\n      await csvExporter.generateCsv(exportArray);\n      toast.success(`You downloaded ${interestData.length} items`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    } else {\n      toast.error(`You have not made any selection`, {\n        position: \"top-right\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true\n      });\n    }\n  };\n\n  const onFilterChange = value => {\n    const filtered = interestData.filter(item => item[\"audience_size\"] >= value[0] && item[\"audience_size\"] <= value[1]);\n    setState(_objectSpread({}, state, {\n      interests: filtered\n    }));\n  };\n\n  const {\n    interests,\n    selectedRowKeys,\n    interestNumber,\n    max,\n    min\n  } = state;\n  return __jsx(\"div\", {\n    id: \"wrapper\",\n    className: \"jsx-3209849346\"\n  }, __jsx(ToastContainer, {\n    position: \"top-left\",\n    autoClose: 5000,\n    hideProgressBar: false,\n    newestOnTop: false,\n    closeOnClick: true,\n    rtl: false,\n    pauseOnVisibilityChange: true,\n    draggable: true,\n    pauseOnHover: true\n  }), __jsx(\"div\", {\n    id: \"main-content\",\n    className: \"jsx-3209849346\"\n  }, __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"top\"\n  }, __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"inner\"\n  }, __jsx(Search, {\n    placeholder: \"Find Facebook interest for a keyword\",\n    enterButton: \"Getch\",\n    size: \"large\",\n    onSearch: value => getInterest(value),\n    className: \"jsx-3209849346\"\n  }), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"controls\"\n  }, __jsx(\"div\", {\n    className: \"jsx-3209849346\"\n  }, interestNumber ? __jsx(\"p\", {\n    className: \"jsx-3209849346\"\n  }, __jsx(\"b\", {\n    className: \"jsx-3209849346\"\n  }, interestNumber), \" interest found for \\\"\", keyword, \"\\\"\") : \"\"), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"filter\"\n  }, __jsx(\"p\", {\n    className: \"jsx-3209849346\"\n  }, \"Filter audience\"), __jsx(_Slider, {\n    max: max,\n    min: min,\n    range: true,\n    defaultValue: [min, max],\n    onAfterChange: onFilterChange\n  })), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"actions\"\n  }, __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"button\"\n  }, __jsx(_Button, {\n    onClick: onCopy\n  }, \"Copy\")), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"button\"\n  }, __jsx(_Button, {\n    onClick: handleExport\n  }, \"Download as CSV\")), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"divider\"\n  }), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"button\"\n  }, __jsx(_Button, {\n    onClick: handleExport\n  }, \"Save as project\")), __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"button\"\n  }, __jsx(_Button, {\n    color: \"#4e54c8\",\n    onClick: handleExport\n  }, \"Save to Facebook\")))))), __jsx(\"div\", {\n    id: \"table\",\n    className: \"jsx-3209849346\"\n  }, searching ? __jsx(\"div\", {\n    className: \"jsx-3209849346\" + \" \" + \"loader\"\n  }, __jsx(Loader, {\n    type: \"Bars\",\n    color: \"#4e54c8\",\n    height: 100,\n    width: 100\n  })) : __jsx(InterestTable, {\n    onSelection: onSelectionChange,\n    selectedRowKeys: selectedRowKeys,\n    className: \"table\",\n    columns: tableColumns,\n    dataSource: interests\n  }))), __jsx(_JSXStyle, {\n    id: \"3209849346\"\n  }, [\"#wrapper.jsx-3209849346{margin:10px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;height:100%;}\", \"#main-content.jsx-3209849346{margin-top:30px;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}\", \"#table.jsx-3209849346{margin-top:30px;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}\", \".controls.jsx-3209849346{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-top:10px;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}\", \".actions.jsx-3209849346{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}\", \".actions.jsx-3209849346>*.jsx-3209849346{margin-left:5px;}\", \".loader.jsx-3209849346{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:500px;}\", \".divider.jsx-3209849346{height:35px;width:0;border-left:1px solid #ccc;margin:0 0 0 5px;}\", \".filter.jsx-3209849346{width:30%;}\", \".top.jsx-3209849346{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:relative;height:130px;margin-bottom:20px;width:100%;background-color:white;}\", \".inner.jsx-3209849346{position:fixed;top:50px;width:81%;background-color:white;z-index:100;height:150px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}\", \".header.jsx-3209849346{margin-bottom:20px;}\"]));\n};\n\nIndex.getInitialProps = async function (context) {\n  const token = context.query.at;\n  return {\n    token\n  };\n};\n\nconst mapStateToProps = state => ({\n  user: state.user.currentUser,\n  searching: state.search.loading,\n  fbToken: state.user.fbToken,\n  interestData: state.search.interests,\n  interestCount: state.search.interestCount,\n  keyword: state.search.keyword\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addUser: item => dispatch(addingCurrentUser(item)),\n  searchInterest: (token, value, limit) => dispatch(searchStart({\n    token,\n    value,\n    limit\n  }))\n});\n\nIndex.Layout = DashboardLayout;\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}