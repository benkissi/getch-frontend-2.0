{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport SearchActionTypes from './search-types';\nconst INITIAL_STATE = {\n  keyword: null,\n  interests: null,\n  searchCount: null,\n  error: null,\n  loading: false,\n  interestCount: null\n};\n\nconst searchReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SearchActionTypes.SEARCH_SUCCESS:\n      return _objectSpread({}, state, {\n        interests: action.payload.data,\n        keyword: action.payload.keyword,\n        error: null\n      });\n\n    case SearchActionTypes.IS_LOADING:\n      return _objectSpread({}, state, {\n        loading: action.payload\n      });\n\n    case SearchActionTypes.SET_COUNT:\n      return _objectSpread({}, state, {\n        searchCount: action.payload\n      });\n\n    case SearchActionTypes.SET_INTEREST_COUNT:\n      return _objectSpread({}, state, {\n        interestCount: action.payload\n      });\n\n    case SearchActionTypes.SEARCH_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;","map":{"version":3,"sources":["/home/benkissi/projects/getch/getch-frontend-2.0/redux/search/search-reducer.js"],"names":["SearchActionTypes","INITIAL_STATE","keyword","interests","searchCount","error","loading","interestCount","searchReducer","state","action","type","SEARCH_SUCCESS","payload","data","IS_LOADING","SET_COUNT","SET_INTEREST_COUNT","SEARCH_FAILURE"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,gBAA9B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,OAAO,EAAE,IADS;AAElBC,EAAAA,SAAS,EAAE,IAFO;AAGlBC,EAAAA,WAAW,EAAE,IAHK;AAIlBC,EAAAA,KAAK,EAAE,IAJW;AAKlBC,EAAAA,OAAO,EAAE,KALS;AAMlBC,EAAAA,aAAa,EAAE;AANG,CAAtB;;AASA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGR,aAAT,EAAwBS,MAAxB,KAAmC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKX,iBAAiB,CAACY,cAAvB;AACI,+BACOH,KADP;AAEIN,QAAAA,SAAS,EAAEO,MAAM,CAACG,OAAP,CAAeC,IAF9B;AAGIZ,QAAAA,OAAO,EAAEQ,MAAM,CAACG,OAAP,CAAeX,OAH5B;AAIIG,QAAAA,KAAK,EAAE;AAJX;;AAMJ,SAAKL,iBAAiB,CAACe,UAAvB;AACI,+BACON,KADP;AAEIH,QAAAA,OAAO,EAAEI,MAAM,CAACG;AAFpB;;AAIJ,SAAKb,iBAAiB,CAACgB,SAAvB;AACI,+BACOP,KADP;AAEIL,QAAAA,WAAW,EAAEM,MAAM,CAACG;AAFxB;;AAIJ,SAAKb,iBAAiB,CAACiB,kBAAvB;AACI,+BACOR,KADP;AAEIF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAF1B;;AAIJ,SAAKb,iBAAiB,CAACkB,cAAvB;AACI,+BACOT,KADP;AAEIJ,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAFlB;;AAIJ;AACI,aAAOJ,KAAP;AA7BR;AA+BH,CAhCD;;AAkCA,eAAeD,aAAf","sourcesContent":["import SearchActionTypes from './search-types'\n\nconst INITIAL_STATE = {\n    keyword: null,\n    interests: null,\n    searchCount: null,\n    error: null,\n    loading: false,\n    interestCount: null\n}\n\nconst searchReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type){\n        case SearchActionTypes.SEARCH_SUCCESS:\n            return {\n                ...state,\n                interests: action.payload.data,\n                keyword: action.payload.keyword,\n                error: null\n            }\n        case SearchActionTypes.IS_LOADING:\n            return {\n                ...state,\n                loading: action.payload\n            }\n        case SearchActionTypes.SET_COUNT:\n            return {\n                ...state,\n                searchCount: action.payload\n            }\n        case SearchActionTypes.SET_INTEREST_COUNT:\n            return {\n                ...state,\n                interestCount: action.payload\n            }\n        case SearchActionTypes.SEARCH_FAILURE:\n            return {\n                ...state,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default searchReducer"]},"metadata":{},"sourceType":"module"}