{"ast":null,"code":"import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions, compileInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames, containsKeyword } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction* getInterest({\n  payload\n}) {\n  try {\n    const {\n      token,\n      value,\n      limit\n    } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n    const suggestions = yield compileInterestSuggestions(token, names);\n    const levelTwo = addScore(suggestions, 3);\n    let allInterest = [...levelOne, ...levelTwo];\n    console.log('all interest', allInterest);\n    const rankedList = allInterest.map(interest => {\n      const exist = containsKeyword(value, interest.name);\n\n      if (exist !== -1) {\n        interest['relevance'] = interest.relevance + 3;\n      }\n\n      return interest;\n    });\n    yield put(searchSuccess({\n      data: rankedList,\n      keyword: value\n    }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}","map":{"version":3,"sources":["/code/ben/getch/frontend/redux/search/search-sagas.js"],"names":["takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","getInterestSuggestions","compileInterestSuggestions","addScore","getInterestNames","containsKeyword","SearchActionTypes","selectInterestTotal","getInterest","payload","token","value","limit","data","levelOne","names","suggestions","levelTwo","allInterest","console","log","rankedList","map","interest","exist","name","relevance","keyword","total","error","onSearchStart","START_SEARCH","searchSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,gBAAlD,QAA0E,kBAA1E;AAEA,SAAQC,cAAR,EAAwBC,sBAAxB,EAAgDC,0BAAhD,QAAiF,eAAjF;AACA,SAAQC,QAAR,EAAkBC,gBAAlB,EAAoCC,eAApC,QAA0D,oBAA1D;AACA,OAAOC,iBAAP,MAA8B,gBAA9B;AAEA,SAAQC,mBAAR,QAAkC,oBAAlC;;AAEA,UAAUC,WAAV,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAkC;AAC9B,MAAG;AACC,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAAwBH,OAA9B;AACA,UAAMjB,GAAG,CAACM,SAAS,CAAC,IAAD,CAAV,CAAT;AACA,UAAMe,IAAI,GAAG,MAAMb,cAAc,CAACU,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAjC;AACA,UAAME,QAAQ,GAAGX,QAAQ,CAACU,IAAI,CAACA,IAAN,EAAY,CAAZ,CAAzB;AACA,QAAIE,KAAK,GAAGX,gBAAgB,CAACS,IAAI,CAACA,IAAN,CAA5B;AAEA,UAAMG,WAAW,GAAG,MAAMd,0BAA0B,CAACQ,KAAD,EAAQK,KAAR,CAApD;AAEA,UAAME,QAAQ,GAAGd,QAAQ,CAACa,WAAD,EAAc,CAAd,CAAzB;AACA,QAAIE,WAAW,GAAG,CAAC,GAAGJ,QAAJ,EAAc,GAAGG,QAAjB,CAAlB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,WAA3B;AACA,UAAMG,UAAU,GAAGH,WAAW,CAACI,GAAZ,CAAiBC,QAAD,IAAc;AAC7C,YAAMC,KAAK,GAAGnB,eAAe,CAACM,KAAD,EAAOY,QAAQ,CAACE,IAAhB,CAA7B;;AACA,UAAGD,KAAK,KAAI,CAAC,CAAb,EAAgB;AACZD,QAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBA,QAAQ,CAACG,SAAT,GAAqB,CAA7C;AACH;;AACD,aAAOH,QAAP;AACH,KANkB,CAAnB;AAQA,UAAM/B,GAAG,CAACI,aAAa,CAAC;AAACiB,MAAAA,IAAI,EAACQ,UAAN;AAAkBM,MAAAA,OAAO,EAAEhB;AAA3B,KAAD,CAAd,CAAT;AACA,UAAMiB,KAAK,GAAG,MAAMjC,MAAM,CAACY,mBAAD,CAA1B;AACA,UAAMf,GAAG,CAACO,gBAAgB,CAAC6B,KAAD,CAAjB,CAAT;AACA,UAAMpC,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;AAEH,GAzBD,CAyBC,OAAM+B,KAAN,EAAY;AACT,UAAMrC,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;AACA,UAAMN,GAAG,CAACK,aAAa,CAACgC,KAAD,CAAd,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,aAAV,GAA2B;AAC9B,QAAMvC,UAAU,CAACe,iBAAiB,CAACyB,YAAnB,EAAiCvB,WAAjC,CAAhB;AACH;AAED,OAAO,UAAUwB,WAAV,GAAyB;AAC5B,QAAMvC,GAAG,CAAC,CACNC,IAAI,CAACoC,aAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions'\n\nimport {searchInterest, getInterestSuggestions, compileInterestSuggestions} from '../../api/api'\nimport {addScore, getInterestNames, containsKeyword} from '../../utils/search'\nimport SearchActionTypes from './search-types'\n\nimport {selectInterestTotal} from './search-selectors'\n\nfunction* getInterest ({payload}) {\n    try{\n        const {token, value, limit} = payload\n        yield put(isLoading(true))\n        const data = yield searchInterest(token, value, limit)\n        const levelOne = addScore(data.data, 5)\n        let names = getInterestNames(data.data)\n       \n        const suggestions = yield compileInterestSuggestions(token, names)\n        \n        const levelTwo = addScore(suggestions, 3)\n        let allInterest = [...levelOne, ...levelTwo]\n        console.log('all interest',allInterest)\n        const rankedList = allInterest.map((interest) => {\n            const exist = containsKeyword(value,interest.name);\n            if(exist !==-1) {\n                interest['relevance'] = interest.relevance + 3;\n            }\n            return interest\n        });\n        \n        yield put(searchSuccess({data:rankedList, keyword: value}))\n        const total = yield select(selectInterestTotal)\n        yield put(setInterestCount(total))\n        yield put(isLoading(false))\n        \n    }catch(error){\n        yield put(isLoading(false))\n        yield put(searchFailure(error))\n    }\n}\n\nexport function* onSearchStart () {\n    yield takeLatest(SearchActionTypes.START_SEARCH, getInterest)\n}\n\nexport function* searchSagas () {\n    yield all([\n        call(onSearchStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}