{"ast":null,"code":"import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from \"./search-actions\";\nimport { searchInterest, updateSearchCount, compileInterestSuggestions } from \"../../api/api\";\nimport { addScore, getInterestNames, containsKeyword, addLinks } from \"../../utils/search\";\nimport SearchActionTypes from \"./search-types\";\nimport { selectInterestTotal } from \"./search-selectors\";\n\nfunction* getInterest({\n  payload\n}) {\n  try {\n    const {\n      token,\n      value,\n      limit,\n      xToken\n    } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n    console.log('intetrest----1');\n    const suggestions = yield compileInterestSuggestions(token, names);\n    console.log('intetrest----2', suggestions);\n    let levelTwo = [];\n\n    if (suggestions !== null && suggestions !== void 0 && suggestions.length) {\n      levelTwo = addScore(suggestions, 3);\n    }\n\n    let allInterest = [...levelOne, ...levelTwo];\n    const rankedList = allInterest.map(interest => {\n      const exist = containsKeyword(value, interest.name);\n\n      if (exist !== -1) {\n        interest[\"relevance\"] = interest.relevance + 3;\n      }\n\n      const searchName = interest.name.toLowerCase().split(\" \").join(\"+\");\n      interest[\"links\"] = [`https://www.facebook.com/search/pages/?q=${searchName}`, `https://www.google.com/search?q=${searchName}`]; // const formatter = new Intl.NumberFormat(\"en-US\");\n      // interest[\"audience_size\"] = formatter.format(interest[\"audience_size\"]);\n\n      return interest;\n    });\n    const {\n      count\n    } = yield updateSearchCount(xToken);\n    console.log(\"count saga\", count);\n    yield put(searchSuccess({\n      data: rankedList,\n      keyword: value,\n      count\n    }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}","map":{"version":3,"sources":["/home/ben/code/million/getch-frontend-2.0/redux/search/search-sagas.js"],"names":["takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","updateSearchCount","compileInterestSuggestions","addScore","getInterestNames","containsKeyword","addLinks","SearchActionTypes","selectInterestTotal","getInterest","payload","token","value","limit","xToken","data","levelOne","names","console","log","suggestions","levelTwo","length","allInterest","rankedList","map","interest","exist","name","relevance","searchName","toLowerCase","split","join","count","keyword","total","error","onSearchStart","START_SEARCH","searchSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport {\n  searchSuccess,\n  searchFailure,\n  isLoading,\n  setInterestCount,\n} from \"./search-actions\";\n\nimport {\n  searchInterest,\n  updateSearchCount,\n  compileInterestSuggestions,\n} from \"../../api/api\";\nimport {\n  addScore,\n  getInterestNames,\n  containsKeyword,\n  addLinks,\n} from \"../../utils/search\";\nimport SearchActionTypes from \"./search-types\";\n\nimport { selectInterestTotal } from \"./search-selectors\";\n\nfunction* getInterest({ payload }) {\n  try {\n    const { token, value, limit, xToken } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n    console.log('intetrest----1')\n    const suggestions = yield compileInterestSuggestions(token, names);\n    console.log('intetrest----2', suggestions)\n    let levelTwo = []\n    if(suggestions?.length){\n      levelTwo = addScore(suggestions, 3);\n    }\n\n    let allInterest = [...levelOne, ...levelTwo];\n    \n    const rankedList = allInterest.map((interest) => {\n      const exist = containsKeyword(value, interest.name);\n      if (exist !== -1) {\n        interest[\"relevance\"] = interest.relevance + 3;\n      }\n      const searchName = interest.name.toLowerCase().split(\" \").join(\"+\");\n      interest[\"links\"] = [\n        `https://www.facebook.com/search/pages/?q=${searchName}`,\n        `https://www.google.com/search?q=${searchName}`,\n      ];\n      // const formatter = new Intl.NumberFormat(\"en-US\");\n\n      // interest[\"audience_size\"] = formatter.format(interest[\"audience_size\"]);\n      return interest;\n    });\n    const { count } = yield updateSearchCount(xToken);\n    console.log(\"count saga\", count);\n    yield put(searchSuccess({ data: rankedList, keyword: value, count }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\n\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}