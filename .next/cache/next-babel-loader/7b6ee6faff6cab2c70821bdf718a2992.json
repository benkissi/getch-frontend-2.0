{"ast":null,"code":"import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction* getInterest({\n  payload\n}) {\n  try {\n    const {\n      token,\n      value,\n      limit\n    } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n\n    if (names.length > 200) {\n      names = names.slice(0, 200);\n    }\n\n    const levelTwo = yield getInterestSuggestions(token, names);\n    console.log('LEVELtWO****', levelTwo);\n    yield put(searchSuccess({\n      data: levelOne,\n      keyword: value\n    }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}","map":{"version":3,"sources":["/code/ben/getch/frontend/redux/search/search-sagas.js"],"names":["takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","getInterestSuggestions","addScore","getInterestNames","SearchActionTypes","selectInterestTotal","getInterest","payload","token","value","limit","data","levelOne","names","length","slice","levelTwo","console","log","keyword","total","error","onSearchStart","START_SEARCH","searchSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,gBAAlD,QAA0E,kBAA1E;AAEA,SAAQC,cAAR,EAAwBC,sBAAxB,QAAqD,eAArD;AACA,SAAQC,QAAR,EAAkBC,gBAAlB,QAAyC,oBAAzC;AACA,OAAOC,iBAAP,MAA8B,gBAA9B;AAEA,SAAQC,mBAAR,QAAkC,oBAAlC;;AAEA,UAAUC,WAAV,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAAkC;AAC9B,MAAG;AACC,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAAwBH,OAA9B;AACA,UAAMf,GAAG,CAACM,SAAS,CAAC,IAAD,CAAV,CAAT;AACA,UAAMa,IAAI,GAAG,MAAMX,cAAc,CAACQ,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAjC;AACA,UAAME,QAAQ,GAAGV,QAAQ,CAACS,IAAI,CAACA,IAAN,EAAY,CAAZ,CAAzB;AACA,QAAIE,KAAK,GAAGV,gBAAgB,CAACQ,IAAI,CAACA,IAAN,CAA5B;;AACA,QAAGE,KAAK,CAACC,MAAN,GAAe,GAAlB,EAAsB;AAClBD,MAAAA,KAAK,GAAGA,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAc,GAAd,CAAR;AACH;;AACD,UAAMC,QAAQ,GAAG,MAAMf,sBAAsB,CAACO,KAAD,EAAQK,KAAR,CAA7C;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,QAA3B;AAEA,UAAMxB,GAAG,CAACI,aAAa,CAAC;AAACe,MAAAA,IAAI,EAACC,QAAN;AAAgBO,MAAAA,OAAO,EAAEV;AAAzB,KAAD,CAAd,CAAT;AACA,UAAMW,KAAK,GAAG,MAAMzB,MAAM,CAACU,mBAAD,CAA1B;AACA,UAAMb,GAAG,CAACO,gBAAgB,CAACqB,KAAD,CAAjB,CAAT;AACA,UAAM5B,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;AAEH,GAjBD,CAiBC,OAAMuB,KAAN,EAAY;AACT,UAAM7B,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;AACA,UAAMN,GAAG,CAACK,aAAa,CAACwB,KAAD,CAAd,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,aAAV,GAA2B;AAC9B,QAAM/B,UAAU,CAACa,iBAAiB,CAACmB,YAAnB,EAAiCjB,WAAjC,CAAhB;AACH;AAED,OAAO,UAAUkB,WAAV,GAAyB;AAC5B,QAAM/B,GAAG,CAAC,CACNC,IAAI,CAAC4B,aAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions'\n\nimport {searchInterest, getInterestSuggestions} from '../../api/api'\nimport {addScore, getInterestNames} from '../../utils/search'\nimport SearchActionTypes from './search-types'\n\nimport {selectInterestTotal} from './search-selectors'\n\nfunction* getInterest ({payload}) {\n    try{\n        const {token, value, limit} = payload\n        yield put(isLoading(true))\n        const data = yield searchInterest(token, value, limit)\n        const levelOne = addScore(data.data, 5)\n        let names = getInterestNames(data.data)\n        if(names.length > 200){\n            names = names.slice(0,200)\n        }\n        const levelTwo = yield getInterestSuggestions(token, names)\n        console.log('LEVELtWO****',levelTwo)\n        \n        yield put(searchSuccess({data:levelOne, keyword: value}))\n        const total = yield select(selectInterestTotal)\n        yield put(setInterestCount(total))\n        yield put(isLoading(false))\n        \n    }catch(error){\n        yield put(isLoading(false))\n        yield put(searchFailure(error))\n    }\n}\n\nexport function* onSearchStart () {\n    yield takeLatest(SearchActionTypes.START_SEARCH, getInterest)\n}\n\nexport function* searchSagas () {\n    yield all([\n        call(onSearchStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}