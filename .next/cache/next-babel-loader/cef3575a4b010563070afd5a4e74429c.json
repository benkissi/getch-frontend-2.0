{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleWare from \"redux-saga\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\nconst sagaMiddleware = createSagaMiddleWare();\n\nconst makeStore = initialState => {\n  const middlewares = [sagaMiddleware];\n\n  if (true) {\n    middlewares.push(logger);\n  }\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  sagaMiddleware.run(rootSaga);\n  persistStore(store);\n  return store;\n};","map":{"version":3,"sources":["/code/ben/getch/frontend/redux/store.js"],"names":["createStore","applyMiddleware","logger","createSagaMiddleWare","persistStore","rootReducer","rootSaga","sagaMiddleware","makeStore","initialState","middlewares","push","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,SAASC,YAAT,QAA6B,eAA7B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;;AAEA,MAAMK,SAAS,GAAIC,YAAD,IAAkB;AAClC,QAAMC,WAAW,GAAG,CAACH,cAAD,CAApB;;AAEA,YAA4C;AAC1CG,IAAAA,WAAW,CAACC,IAAZ,CAAiBT,MAAjB;AACD;;AAED,QAAMU,KAAK,GAAGZ,WAAW,CAACK,WAAD,EAAcJ,eAAe,CAAC,GAAGS,WAAJ,CAA7B,CAAzB;AACAH,EAAAA,cAAc,CAACM,GAAf,CAAmBP,QAAnB;AAEAF,EAAAA,YAAY,CAACQ,KAAD,CAAZ;AAEA,SAAOA,KAAP;AACD,CAbD","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport logger from \"redux-logger\";\nimport createSagaMiddleWare from \"redux-saga\";\n\nimport { persistStore } from \"redux-persist\";\n\nimport rootReducer from \"./root-reducer\";\nimport rootSaga from \"./root-saga\";\n\nconst sagaMiddleware = createSagaMiddleWare();\n\nconst makeStore = (initialState) => {\n  const middlewares = [sagaMiddleware];\n\n  if (process.env.NODE_ENV === \"development\") {\n    middlewares.push(logger);\n  }\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  sagaMiddleware.run(rootSaga);\n\n  persistStore(store);\n\n  return store\n}\n\n"]},"metadata":{},"sourceType":"module"}