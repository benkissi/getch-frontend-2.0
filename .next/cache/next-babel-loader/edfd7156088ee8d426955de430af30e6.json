{"ast":null,"code":"import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions, compileInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames, containsKeyword } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction* getInterest({\n  payload\n}) {\n  try {\n    const {\n      token,\n      value,\n      limit\n    } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n    const suggestions = yield compileInterestSuggestions(token, names);\n    const levelTwo = addScore(suggestions, 3);\n    let allInterest = [...levelOne, ...levelTwo];\n    const rankedList = allInterest.map(interest => {\n      const exist = containsKeyword(value, interest.name);\n\n      if (exist !== -1) {\n        interest['relevance'] = interest.relevance + 3;\n      }\n\n      return interest;\n    });\n    yield put(searchSuccess({\n      data: rankedList,\n      keyword: value\n    }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}","map":null,"metadata":{},"sourceType":"module"}