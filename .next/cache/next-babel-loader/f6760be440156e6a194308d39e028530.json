{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getInterest),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(onSearchStart),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(searchSagas);\n\nimport { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction getInterest(_ref) {\n  var payload, token, value, limit, data, levelOne, names, levelTwo, total;\n  return _regeneratorRuntime.wrap(function getInterest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          token = payload.token, value = payload.value, limit = payload.limit;\n          _context.next = 5;\n          return put(isLoading(true));\n\n        case 5:\n          _context.next = 7;\n          return searchInterest(token, value, limit);\n\n        case 7:\n          data = _context.sent;\n          levelOne = addScore(data.data, 5);\n          names = getInterestNames(data.data);\n          _context.next = 12;\n          return getInterestSuggestions(token, names);\n\n        case 12:\n          levelTwo = _context.sent;\n          console.log('LEVELtWO****', levelTwo);\n          _context.next = 16;\n          return put(searchSuccess({\n            data: levelOne,\n            keyword: value\n          }));\n\n        case 16:\n          _context.next = 18;\n          return select(selectInterestTotal);\n\n        case 18:\n          total = _context.sent;\n          _context.next = 21;\n          return put(setInterestCount(total));\n\n        case 21:\n          _context.next = 23;\n          return put(isLoading(false));\n\n        case 23:\n          _context.next = 31;\n          break;\n\n        case 25:\n          _context.prev = 25;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 29;\n          return put(isLoading(false));\n\n        case 29:\n          _context.next = 31;\n          return put(searchFailure(_context.t0));\n\n        case 31:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 25]]);\n}\n\nexport function onSearchStart() {\n  return _regeneratorRuntime.wrap(function onSearchStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function searchSagas() {\n  return _regeneratorRuntime.wrap(function searchSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onSearchStart)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/code/ben/getch/frontend/redux/search/search-sagas.js"],"names":["getInterest","onSearchStart","searchSagas","takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","getInterestSuggestions","addScore","getInterestNames","SearchActionTypes","selectInterestTotal","payload","token","value","limit","data","levelOne","names","levelTwo","console","log","keyword","total","START_SEARCH"],"mappings":";;;;yBASUA,W;;;yBAqBOC,a;;;yBAIAC,W;;AAlCjB,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,SAAvC,EAAkDC,gBAAlD,QAA0E,kBAA1E;AAEA,SAAQC,cAAR,EAAwBC,sBAAxB,QAAqD,eAArD;AACA,SAAQC,QAAR,EAAkBC,gBAAlB,QAAyC,oBAAzC;AACA,OAAOC,iBAAP,MAA8B,gBAA9B;AAEA,SAAQC,mBAAR,QAAkC,oBAAlC;;AAEA,SAAUjB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwBkB,UAAAA,OAAxB,QAAwBA,OAAxB;AAAA;AAEeC,UAAAA,KAFf,GAEsCD,OAFtC,CAEeC,KAFf,EAEsBC,KAFtB,GAEsCF,OAFtC,CAEsBE,KAFtB,EAE6BC,KAF7B,GAEsCH,OAFtC,CAE6BG,KAF7B;AAAA;AAGQ,iBAAMjB,GAAG,CAACM,SAAS,CAAC,IAAD,CAAV,CAAT;;AAHR;AAAA;AAIqB,iBAAME,cAAc,CAACO,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAApB;;AAJrB;AAIcC,UAAAA,IAJd;AAKcC,UAAAA,QALd,GAKyBT,QAAQ,CAACQ,IAAI,CAACA,IAAN,EAAY,CAAZ,CALjC;AAMcE,UAAAA,KANd,GAMsBT,gBAAgB,CAACO,IAAI,CAACA,IAAN,CANtC;AAAA;AAOyB,iBAAMT,sBAAsB,CAACM,KAAD,EAAQK,KAAR,CAA5B;;AAPzB;AAOcC,UAAAA,QAPd;AAQQC,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA2BF,QAA3B;AARR;AAUQ,iBAAMrB,GAAG,CAACI,aAAa,CAAC;AAACc,YAAAA,IAAI,EAACC,QAAN;AAAgBK,YAAAA,OAAO,EAAER;AAAzB,WAAD,CAAd,CAAT;;AAVR;AAAA;AAWsB,iBAAMb,MAAM,CAACU,mBAAD,CAAZ;;AAXtB;AAWcY,UAAAA,KAXd;AAAA;AAYQ,iBAAMzB,GAAG,CAACO,gBAAgB,CAACkB,KAAD,CAAjB,CAAT;;AAZR;AAAA;AAaQ,iBAAMzB,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;;AAbR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBQ,iBAAMN,GAAG,CAACM,SAAS,CAAC,KAAD,CAAV,CAAT;;AAhBR;AAAA;AAiBQ,iBAAMN,GAAG,CAACK,aAAa,aAAd,CAAT;;AAjBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBA,OAAO,SAAUR,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAME,UAAU,CAACa,iBAAiB,CAACc,YAAnB,EAAiC9B,WAAjC,CAAhB;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIP,OAAO,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,iBAAMG,GAAG,CAAC,CACNC,IAAI,CAACL,aAAD,CADE,CAAD,CAAT;;AADG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions'\n\nimport {searchInterest, getInterestSuggestions} from '../../api/api'\nimport {addScore, getInterestNames} from '../../utils/search'\nimport SearchActionTypes from './search-types'\n\nimport {selectInterestTotal} from './search-selectors'\n\nfunction* getInterest ({payload}) {\n    try{\n        const {token, value, limit} = payload\n        yield put(isLoading(true))\n        const data = yield searchInterest(token, value, limit)\n        const levelOne = addScore(data.data, 5)\n        const names = getInterestNames(data.data)\n        const levelTwo = yield getInterestSuggestions(token, names)\n        console.log('LEVELtWO****',levelTwo)\n        \n        yield put(searchSuccess({data:levelOne, keyword: value}))\n        const total = yield select(selectInterestTotal)\n        yield put(setInterestCount(total))\n        yield put(isLoading(false))\n        \n    }catch(error){\n        yield put(isLoading(false))\n        yield put(searchFailure(error))\n    }\n}\n\nexport function* onSearchStart () {\n    yield takeLatest(SearchActionTypes.START_SEARCH, getInterest)\n}\n\nexport function* searchSagas () {\n    yield all([\n        call(onSearchStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}