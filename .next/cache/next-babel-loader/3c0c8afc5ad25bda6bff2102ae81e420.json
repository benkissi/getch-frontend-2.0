{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getInterest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onSearchStart),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(searchSagas);\n\nimport { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from \"./search-actions\";\nimport { searchInterest, updateSearchCount, compileInterestSuggestions } from \"../../api/api\";\nimport { addScore, getInterestNames, containsKeyword, addLinks } from \"../../utils/search\";\nimport SearchActionTypes from \"./search-types\";\nimport { selectInterestTotal } from \"./search-selectors\";\n\nfunction getInterest(_ref) {\n  var payload, token, value, limit, xToken, data, levelOne, names, suggestions, levelTwo, allInterest, rankedList, _yield$updateSearchCo, count, total;\n\n  return _regeneratorRuntime.wrap(function getInterest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          token = payload.token, value = payload.value, limit = payload.limit, xToken = payload.xToken;\n          _context.next = 5;\n          return put(isLoading(true));\n\n        case 5:\n          _context.next = 7;\n          return searchInterest(token, value, limit);\n\n        case 7:\n          data = _context.sent;\n          levelOne = addScore(data.data, 5);\n          names = getInterestNames(data.data);\n          _context.next = 12;\n          return compileInterestSuggestions(token, names);\n\n        case 12:\n          suggestions = _context.sent;\n          levelTwo = addScore(suggestions, 3);\n          allInterest = [].concat(_toConsumableArray(levelOne), _toConsumableArray(levelTwo));\n          rankedList = allInterest.map(function (interest) {\n            var exist = containsKeyword(value, interest.name);\n\n            if (exist !== -1) {\n              interest[\"relevance\"] = interest.relevance + 3;\n            }\n\n            var searchName = interest.name.toLowerCase().split(\" \").join(\"+\");\n            interest[\"links\"] = [\"https://www.facebook.com/search/pages/?q=\".concat(searchName), \"https://www.google.com/search?q=\".concat(searchName)];\n            var formatter = new Intl.NumberFormat(\"en-US\", {\n              style: \"currency\"\n            });\n            interest[\"audience_size\"] = formatter.format(interest[\"audience_size\"]);\n            return interest;\n          });\n          _context.next = 18;\n          return updateSearchCount(xToken);\n\n        case 18:\n          _yield$updateSearchCo = _context.sent;\n          count = _yield$updateSearchCo.count;\n          console.log(\"count saga\", count);\n          _context.next = 23;\n          return put(searchSuccess({\n            data: rankedList,\n            keyword: value,\n            count: count\n          }));\n\n        case 23:\n          _context.next = 25;\n          return select(selectInterestTotal);\n\n        case 25:\n          total = _context.sent;\n          _context.next = 28;\n          return put(setInterestCount(total));\n\n        case 28:\n          _context.next = 30;\n          return put(isLoading(false));\n\n        case 30:\n          _context.next = 38;\n          break;\n\n        case 32:\n          _context.prev = 32;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 36;\n          return put(isLoading(false));\n\n        case 36:\n          _context.next = 38;\n          return put(searchFailure(_context.t0));\n\n        case 38:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 32]]);\n}\n\nexport function onSearchStart() {\n  return _regeneratorRuntime.wrap(function onSearchStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function searchSagas() {\n  return _regeneratorRuntime.wrap(function searchSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onSearchStart)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/benkissi/projects/getch/getch-frontend-2.0/redux/search/search-sagas.js"],"names":["getInterest","onSearchStart","searchSagas","takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","updateSearchCount","compileInterestSuggestions","addScore","getInterestNames","containsKeyword","addLinks","SearchActionTypes","selectInterestTotal","payload","token","value","limit","xToken","data","levelOne","names","suggestions","levelTwo","allInterest","rankedList","map","interest","exist","name","relevance","searchName","toLowerCase","split","join","formatter","Intl","NumberFormat","style","format","count","console","log","keyword","total","START_SEARCH"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport {\n  searchSuccess,\n  searchFailure,\n  isLoading,\n  setInterestCount,\n} from \"./search-actions\";\n\nimport {\n  searchInterest,\n  updateSearchCount,\n  compileInterestSuggestions,\n} from \"../../api/api\";\nimport {\n  addScore,\n  getInterestNames,\n  containsKeyword,\n  addLinks,\n} from \"../../utils/search\";\nimport SearchActionTypes from \"./search-types\";\n\nimport { selectInterestTotal } from \"./search-selectors\";\n\nfunction* getInterest({ payload }) {\n  try {\n    const { token, value, limit, xToken } = payload;\n    yield put(isLoading(true));\n    const data = yield searchInterest(token, value, limit);\n    const levelOne = addScore(data.data, 5);\n    let names = getInterestNames(data.data);\n\n    const suggestions = yield compileInterestSuggestions(token, names);\n\n    const levelTwo = addScore(suggestions, 3);\n    let allInterest = [...levelOne, ...levelTwo];\n    const rankedList = allInterest.map((interest) => {\n      const exist = containsKeyword(value, interest.name);\n      if (exist !== -1) {\n        interest[\"relevance\"] = interest.relevance + 3;\n      }\n      const searchName = interest.name.toLowerCase().split(\" \").join(\"+\");\n      interest[\"links\"] = [\n        `https://www.facebook.com/search/pages/?q=${searchName}`,\n        `https://www.google.com/search?q=${searchName}`,\n      ];\n      const formatter = new Intl.NumberFormat(\"en-US\", {\n        style: \"currency\",\n      });\n\n      interest[\"audience_size\"] = formatter.format(interest[\"audience_size\"]);\n      return interest;\n    });\n    const { count } = yield updateSearchCount(xToken);\n    console.log(\"count saga\", count);\n    yield put(searchSuccess({ data: rankedList, keyword: value, count }));\n    const total = yield select(selectInterestTotal);\n    yield put(setInterestCount(total));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(searchFailure(error));\n  }\n}\n\nexport function* onSearchStart() {\n  yield takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n}\n\nexport function* searchSagas() {\n  yield all([call(onSearchStart)]);\n}\n"]},"metadata":{},"sourceType":"module"}