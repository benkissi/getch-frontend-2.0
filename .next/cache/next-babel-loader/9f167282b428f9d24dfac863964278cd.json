{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getInterest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onSearchStart),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(searchSagas);\n\nimport { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions, compileInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames, containsKeyword } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction getInterest(_ref) {\n  var payload, token, value, limit, data, levelOne, names, suggestions, levelTwo, allInterest, rankedList, total;\n  return _regeneratorRuntime.wrap(function getInterest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          token = payload.token, value = payload.value, limit = payload.limit;\n          _context.next = 5;\n          return put(isLoading(true));\n\n        case 5:\n          _context.next = 7;\n          return searchInterest(token, value, limit);\n\n        case 7:\n          data = _context.sent;\n          levelOne = addScore(data.data, 5);\n          names = getInterestNames(data.data);\n          _context.next = 12;\n          return compileInterestSuggestions(token, names);\n\n        case 12:\n          suggestions = _context.sent;\n          levelTwo = addScore(suggestions, 3);\n          allInterest = [].concat(_toConsumableArray(levelOne), _toConsumableArray(levelTwo));\n          rankedList = allInterest.map(function (interest) {\n            var exist = containsKeyword(value, interest.name);\n\n            if (exist !== -1) {\n              interest['relevance'] = interest.relevance + 3;\n            }\n\n            return interest;\n          });\n          _context.next = 18;\n          return put(searchSuccess({\n            data: rankedList,\n            keyword: value\n          }));\n\n        case 18:\n          _context.next = 20;\n          return select(selectInterestTotal);\n\n        case 20:\n          total = _context.sent;\n          _context.next = 23;\n          return put(setInterestCount(total));\n\n        case 23:\n          _context.next = 25;\n          return put(isLoading(false));\n\n        case 25:\n          _context.next = 33;\n          break;\n\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 31;\n          return put(isLoading(false));\n\n        case 31:\n          _context.next = 33;\n          return put(searchFailure(_context.t0));\n\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 27]]);\n}\n\nexport function onSearchStart() {\n  return _regeneratorRuntime.wrap(function onSearchStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function searchSagas() {\n  return _regeneratorRuntime.wrap(function searchSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onSearchStart)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":null,"metadata":{},"sourceType":"module"}