{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user-types\";\nimport { siginSuccess, signupSuccess, signupFailure, setCurrentUser, siginFailure, isLoading, facebookAuthSuccess, fbAuthFailure, userLogoutSuccess, userLogoutFailure } from \"./user-actions\";\nimport { fbAuthentication, signUp, signIn, userLogout } from \"../../api/api\";\nexport function* setUser({\n  payload\n}) {\n  try {\n    yield put(isLoading(true));\n\n    if (!payload) {\n      throw new Error(\"No user\");\n    }\n\n    yield put(setCurrentUser(payload));\n    yield put(siginSuccess(true));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(siginFailure(error));\n    yield put(isLoading(false));\n  }\n}\nexport function* signUpUser({\n  payload\n}) {\n  try {\n    yield put(isLoading(true));\n    console.log(\"the payload\", payload);\n    const res = yield signUp(payload.email, payload.password);\n    const userData = {\n      id: res._id,\n      name: res.name,\n      email: res.email,\n      xToken: res.xToken\n    };\n    console.log(\"User data\", userData);\n    yield put(setCurrentUser(userData));\n    yield put(signupSuccess(true));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(signupFailure(error));\n  }\n}\nexport function* signInUser({\n  payload\n}) {\n  try {\n    yield put(isLoading(true));\n    const res = yield signIn(payload.email, payload.password);\n    const userData = {\n      id: res._id,\n      name: res.name,\n      email: res.email,\n      xToken: res.xToken\n    };\n    yield put(setCurrentUser(userData));\n    yield put(isLoading(false));\n    console.log(\"signin response\", userData);\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(siginFailure(error));\n  }\n}\nexport function* facebookAuth({\n  payload\n}) {\n  yield put(isLoading(true));\n\n  try {\n    const {\n      token,\n      id,\n      fbId,\n      name\n    } = payload;\n    console.log('payload', payload);\n    yield put(isLoading(true));\n    const fbToken = yield fbAuthentication(token, id, fbId, name);\n    yield put(facebookAuthSuccess(fbToken));\n    yield put(isLoading(false));\n  } catch (error) {\n    yield put(fbAuthFailure(error));\n    yield put(isLoading(false));\n  }\n}\nexport function* logout({\n  payload\n}) {\n  try {\n    yield put(isLoading(true));\n    const res = yield userLogout(payload);\n\n    if (res === true) {\n      console.log('logout done');\n      yield put(userLogoutSuccess());\n      yield put(isLoading(false));\n    }\n  } catch (error) {\n    yield put(isLoading(false));\n    yield put(userLogoutFailure(error));\n  }\n}\nexport function* onAddingCurrentUser() {\n  yield takeLatest(UserActionTypes.ADDING_CURRENT_USER, setUser);\n}\nexport function* onSignupStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUpUser);\n}\nexport function* onSigninStart() {\n  yield takeLatest(UserActionTypes.SIGN_IN_START, signInUser);\n}\nexport function* onAuthFacebook() {\n  yield takeLatest(UserActionTypes.AUTH_FACEBOOK, facebookAuth);\n}\nexport function* onLogout() {\n  yield takeLatest(UserActionTypes.LOG_OUT, logout);\n}\nexport function* userSagas() {\n  yield all([call(onAuthFacebook), call(onAddingCurrentUser), call(onSigninStart), call(onSignupStart), call(onLogout)]);\n}","map":null,"metadata":{},"sourceType":"module"}