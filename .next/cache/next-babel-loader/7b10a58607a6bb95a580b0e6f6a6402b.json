{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport SearchActionTypes from \"./search-types\";\nvar INITIAL_STATE = {\n  keyword: null,\n  interests: null,\n  searchCount: 0,\n  error: null,\n  loading: false,\n  interestCount: null\n};\n\nvar searchReducer = function searchReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SearchActionTypes.SEARCH_SUCCESS:\n      return _objectSpread({}, state, {\n        interests: action.payload.data,\n        keyword: action.payload.keyword,\n        searchCount: action.payload.count,\n        error: null\n      });\n\n    case SearchActionTypes.IS_LOADING:\n      return _objectSpread({}, state, {\n        loading: action.payload\n      });\n\n    case SearchActionTypes.SET_COUNT:\n      return _objectSpread({}, state, {\n        searchCount: action.payload\n      });\n\n    case SearchActionTypes.SET_INTEREST_COUNT:\n      return _objectSpread({}, state, {\n        interestCount: action.payload\n      });\n\n    case SearchActionTypes.SEARCH_FAILURE:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;","map":{"version":3,"sources":["/mnt/c/Users/Ben Kissi/Documents/code/getch/getch-frontend-2.0/redux/search/search-reducer.js"],"names":["SearchActionTypes","INITIAL_STATE","keyword","interests","searchCount","error","loading","interestCount","searchReducer","state","action","type","SEARCH_SUCCESS","payload","data","count","IS_LOADING","SET_COUNT","SET_INTEREST_COUNT","SEARCH_FAILURE"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,gBAA9B;AAEA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,OAAO,EAAE,IADW;AAEpBC,EAAAA,SAAS,EAAE,IAFS;AAGpBC,EAAAA,WAAW,EAAE,CAHO;AAIpBC,EAAAA,KAAK,EAAE,IAJa;AAKpBC,EAAAA,OAAO,EAAE,KALW;AAMpBC,EAAAA,aAAa,EAAE;AANK,CAAtB;;AASA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BR,aAA0B;AAAA,MAAXS,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,iBAAiB,CAACY,cAAvB;AACE,+BACKH,KADL;AAEEN,QAAAA,SAAS,EAAEO,MAAM,CAACG,OAAP,CAAeC,IAF5B;AAGEZ,QAAAA,OAAO,EAAEQ,MAAM,CAACG,OAAP,CAAeX,OAH1B;AAIEE,QAAAA,WAAW,EAAEM,MAAM,CAACG,OAAP,CAAeE,KAJ9B;AAKEV,QAAAA,KAAK,EAAE;AALT;;AAOF,SAAKL,iBAAiB,CAACgB,UAAvB;AACE,+BACKP,KADL;AAEEH,QAAAA,OAAO,EAAEI,MAAM,CAACG;AAFlB;;AAIF,SAAKb,iBAAiB,CAACiB,SAAvB;AACE,+BACKR,KADL;AAEEL,QAAAA,WAAW,EAAEM,MAAM,CAACG;AAFtB;;AAIF,SAAKb,iBAAiB,CAACkB,kBAAvB;AACE,+BACKT,KADL;AAEEF,QAAAA,aAAa,EAAEG,MAAM,CAACG;AAFxB;;AAIF,SAAKb,iBAAiB,CAACmB,cAAvB;AACE,+BACKV,KADL;AAEEJ,QAAAA,KAAK,EAAEK,MAAM,CAACG;AAFhB;;AAIF;AACE,aAAOJ,KAAP;AA9BJ;AAgCD,CAjCD;;AAmCA,eAAeD,aAAf","sourcesContent":["import SearchActionTypes from \"./search-types\";\n\nconst INITIAL_STATE = {\n  keyword: null,\n  interests: null,\n  searchCount: 0,\n  error: null,\n  loading: false,\n  interestCount: null,\n};\n\nconst searchReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SearchActionTypes.SEARCH_SUCCESS:\n      return {\n        ...state,\n        interests: action.payload.data,\n        keyword: action.payload.keyword,\n        searchCount: action.payload.count,\n        error: null,\n      };\n    case SearchActionTypes.IS_LOADING:\n      return {\n        ...state,\n        loading: action.payload,\n      };\n    case SearchActionTypes.SET_COUNT:\n      return {\n        ...state,\n        searchCount: action.payload,\n      };\n    case SearchActionTypes.SET_INTEREST_COUNT:\n      return {\n        ...state,\n        interestCount: action.payload,\n      };\n    case SearchActionTypes.SEARCH_FAILURE:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n"]},"metadata":{},"sourceType":"module"}