{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getInterest),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(onSearchStart),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(searchSagas);\n\nimport { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions';\nimport { searchInterest, getInterestSuggestions, compileInterestSuggestions } from '../../api/api';\nimport { addScore, getInterestNames, containsKeyword } from '../../utils/search';\nimport SearchActionTypes from './search-types';\nimport { selectInterestTotal } from './search-selectors';\n\nfunction getInterest(_ref) {\n  var payload, token, value, limit, data, levelOne, names, suggestions, levelTwo, allInterest, rankedList, total;\n  return _regeneratorRuntime.wrap(function getInterest$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref.payload;\n          _context.prev = 1;\n          token = payload.token, value = payload.value, limit = payload.limit;\n          _context.next = 5;\n          return put(isLoading(true));\n\n        case 5:\n          _context.next = 7;\n          return searchInterest(token, value, limit);\n\n        case 7:\n          data = _context.sent;\n          levelOne = addScore(data.data, 5);\n          names = getInterestNames(data.data);\n          _context.next = 12;\n          return compileInterestSuggestions(token, names);\n\n        case 12:\n          suggestions = _context.sent;\n          levelTwo = addScore(suggestions, 3);\n          allInterest = [].concat(_toConsumableArray(levelOne), _toConsumableArray(levelTwo));\n          rankedList = allInterest.map(function (interest) {\n            var exist = containsKeyword(value, interest.name);\n\n            if (exist !== -1) {\n              interest['relevance'] = interest.relevance + 3;\n            }\n\n            return interest;\n          });\n          _context.next = 18;\n          return put(searchSuccess({\n            data: rankedList,\n            keyword: value\n          }));\n\n        case 18:\n          _context.next = 20;\n          return select(selectInterestTotal);\n\n        case 20:\n          total = _context.sent;\n          _context.next = 23;\n          return put(setInterestCount(total));\n\n        case 23:\n          _context.next = 25;\n          return put(isLoading(false));\n\n        case 25:\n          _context.next = 33;\n          break;\n\n        case 27:\n          _context.prev = 27;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 31;\n          return put(isLoading(false));\n\n        case 31:\n          _context.next = 33;\n          return put(searchFailure(_context.t0));\n\n        case 33:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 27]]);\n}\n\nexport function onSearchStart() {\n  return _regeneratorRuntime.wrap(function onSearchStart$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SearchActionTypes.START_SEARCH, getInterest);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function searchSagas() {\n  return _regeneratorRuntime.wrap(function searchSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([call(onSearchStart)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/home/benkissi/projects/getch/getch-frontend-2.0/redux/search/search-sagas.js"],"names":["getInterest","onSearchStart","searchSagas","takeLatest","put","all","call","select","searchSuccess","searchFailure","isLoading","setInterestCount","searchInterest","getInterestSuggestions","compileInterestSuggestions","addScore","getInterestNames","containsKeyword","SearchActionTypes","selectInterestTotal","payload","token","value","limit","data","levelOne","names","suggestions","levelTwo","allInterest","rankedList","map","interest","exist","name","relevance","keyword","total","START_SEARCH"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call, select } from \"redux-saga/effects\";\nimport { searchSuccess, searchFailure, isLoading, setInterestCount } from './search-actions'\n\nimport {searchInterest, getInterestSuggestions, compileInterestSuggestions} from '../../api/api'\nimport {addScore, getInterestNames, containsKeyword} from '../../utils/search'\nimport SearchActionTypes from './search-types'\n\nimport {selectInterestTotal} from './search-selectors'\n\nfunction* getInterest ({payload}) {\n    try{\n        const {token, value, limit} = payload\n        yield put(isLoading(true))\n        const data = yield searchInterest(token, value, limit)\n        const levelOne = addScore(data.data, 5)\n        let names = getInterestNames(data.data)\n       \n        const suggestions = yield compileInterestSuggestions(token, names)\n        \n        const levelTwo = addScore(suggestions, 3)\n        let allInterest = [...levelOne, ...levelTwo]\n        const rankedList = allInterest.map((interest) => {\n            const exist = containsKeyword(value,interest.name);\n            if(exist !==-1) {\n                interest['relevance'] = interest.relevance + 3;\n            }\n            return interest\n        });\n        \n        yield put(searchSuccess({data:rankedList, keyword: value}))\n        const total = yield select(selectInterestTotal)\n        yield put(setInterestCount(total))\n        yield put(isLoading(false))\n        \n    }catch(error){\n        yield put(isLoading(false))\n        yield put(searchFailure(error))\n    }\n}\n\nexport function* onSearchStart () {\n    yield takeLatest(SearchActionTypes.START_SEARCH, getInterest)\n}\n\nexport function* searchSagas () {\n    yield all([\n        call(onSearchStart)\n    ])\n}\n\n"]},"metadata":{},"sourceType":"module"}