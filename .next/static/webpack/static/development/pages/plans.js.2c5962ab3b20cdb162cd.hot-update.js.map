{"version":3,"file":"static/webpack/static/development/pages/plans.js.2c5962ab3b20cdb162cd.hot-update.js","sources":["webpack:///./pages/plans.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport DashboardLayout from \"../components/dashboardLayout\";\nimport Plan from \"../components/plan\";\nimport { connect } from \"react-redux\";\n\nimport { verifyPayment } from \"../redux/user/user-actions\";\n\nconst Plans = (props) => {\n  useEffect(() => {\n    if (!window.getpaidSetup) {\n      new Promise((resolve) => {\n        loadScript(() => {\n          resolve();\n        });\n      });\n    }\n  }, []);\n\n  const features = [\n    {\n      image: \"/images/search.svg\",\n      description:\n        \"Uncover 1000's of targetable Facebook™ interests your competition can't find, so you can avoid the bidding war and skyrocket your ROAS \",\n    },\n    {\n      image: \"/images/download.svg\",\n      description:\n        \"Easily cherrypick profitable Facebook™ interests by simply copy - pasting them in your detailed targeting or downloading them as a CSV file\",\n    },\n    {\n      image: \"/images/time.svg\",\n      description:\n        \"Save hours of manual interest research with our auto-generated interest research links\",\n    },\n  ];\n\n  const loadScript = (callback) => {\n    const script = document.createElement(\"script\");\n    script.src = !props.isProduction\n      ? \"https://ravesandboxapi.flutterwave.com/flwv3-pug/getpaidx/api/flwpbf-inline.js\"\n      : \"https://api.ravepay.co/flwv3-pug/getpaidx/api/flwpbf-inline.js\";\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n    if (script.readyState) {\n      // IE\n      script.onreadystatechange = () => {\n        if (\n          script.readyState === \"loaded\" ||\n          script.readyState === \"complete\"\n        ) {\n          script.onreadystatechange = null;\n          callback();\n        }\n      };\n    } else {\n      // Others\n      script.onload = () => {\n        callback();\n      };\n    }\n  };\n\n  const paymentCallback = async (plan, response) => {\n    if (\n      response.tx.chargeResponseCode == \"00\" ||\n      response.tx.chargeResponseCode == \"0\"\n    ) {\n      await props.verify(props.user.xToken, plan, response.tx.txRef);\n\n      // if (res.data.plan.name !== \"trial\") {\n      //   updateState(res.data.plan.name, res.data.plan.nextPayment);\n      //   console.log(\"paid\");\n      // } else if (res.status == 400) {\n      //   toast.error(`Something went wrong. Contact support if this persits`, {\n      //     position: \"top-right\",\n      //     autoClose: 5000,\n      //     hideProgressBar: false,\n      //     closeOnClick: true,\n      //     pauseOnHover: true,\n      //     draggable: true,\n      //   });\n      // }\n    }\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"title\">\n        <h2>Pricing</h2>\n        <p>Simple pricing, no hidden fees</p>\n      </div>\n      <div className=\"packages\">\n        <Plan\n          image=\"/images/fbKey.svg\"\n          title=\"Life-time Access\"\n          description=\"Get access to hidden Facebook interest\"\n          features={features}\n          userEmail={props.user ? props.user.email : \"\"}\n          fName={props.user ? props.user.name.split[0] : \"\"}\n          lName={props.user ? props.user.name.split[1] : \"\"}\n          verifyPayment={paymentCallback}\n          currentPlan={props.user ? props.user.plan : \"\"}\n        />\n      </div>\n      <style jsx>{`\n        .wrapper {\n          display: flex;\n          margin-top: 100px;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n        }\n\n        .title {\n          display: flex;\n          align-items: center;\n          flex-direction: column;\n          justify-content: center;\n        }\n\n        .packages {\n          display: flex;\n          justify-content: center;\n          width: 100%;\n          margin-top: 50px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nPlans.Layout = DashboardLayout;\n\nPlans.defaultProps = {\n  isProduction: false,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user.currentUser,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  verify: (token, plan, ref) => dispatch(verifyPayment({ token, plan, ref })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Plans);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAFA;AAMA;AACA;AAFA;AAMA;AACA;AAFA;AACA;AAMA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AA2CA;AACA;AACA;AAEA;AACA;AADA;AACA;AAGA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}